// ShadowTicTacToe.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include <iostream>
#include <string>
#include "Player.h" //Adds the player class
#include "Boards.h" //Adds the main board and shadow board class
#include <cstdlib>
#include <ctime> //to get random function based on a seed generated by computer time.
using namespace std;

int currentPlayer; // Determines if player 1 or player 2 is going.
char playAgain = 'y'; //conditional. if n or N ends the game
int switchP(int p); // function to switch the player each time
bool comp2; // decide if a computer is playing.
int turn; // count the number of turns
int draw; // count the number of draws

int main()
{
	srand(time(0)); //generate a random number seed based on the time

	//Set up the players, and assign characters
	bool newGame = true; // Determines if the user will play again.
	int space; //pick a space on the board 1-9
	draw = 0; //set draws to 0
	char c2; // Used for validation against player 1's character
	Player p1('X'); //construct p1 with a default x character
	cout << "Choose the symbol of player 1" << endl;
	p1.setCh(cin.get()); //Choose the new character
	Player p2('O'); //contruct p2 with default O character
	cout << "Is player 2 a computer? type '0' for no, '1' for yes" << endl;
	cin >> comp2;
	p2.setComp(comp2); //make player 2 a computer
	cout << "Choose the symbol of player 2" << endl;
	do {
		cin >> c2;
	} while (c2 == p1.getCh());  //validate that player 2's character is different than p1.
	p2.setCh(c2); //set player 2s character
	
	
	while (newGame == true) { //start the game. do while the user wants to play again.
		currentPlayer = 1; //player 1 always starts first
		turn = 1; //set the turn counter
		Boards b = Boards(); // set up board 1 as default. b2 is automatically randomized.

		while (b.Win() == false && turn < 10) { // checks the condition if either board has won. while loop continues until game is won.
			b.showBoards(); //display the board in the current state
			cout << "Player " << currentPlayer << endl; // says who is up
			cout << "Choose an open space between 1-9" << endl;
			do {
				if (currentPlayer == 1 || (currentPlayer == 2 && p2.getComp() == false)) {
					cin >> space; // get the space to edit
					space--; //equate it to the correct array space
				}
				else {
					space = rand() % 9; //generate a random number between 0-8. while loop repeats until an unchosen space is selected.
					if (b.getB1(space) != p1.getCh() && b.getB1(space) != p2.getCh()) {
						cout << "Computer player chose: " << space+1 << endl;
					}
				}
				if (b.getB1(space) == p1.getCh() || b.getB1(space) == p2.getCh()) { //if the space is taken, redo the loop
					if (currentPlayer == 1 || (currentPlayer == 2 && p2.getComp()== false) || space > 8 || space < 0) { //if it is not a computer, shows this message
						cout << "Use a space that is not yet chosen." << endl;
					}
				}
			} while (b.getB1(space) == p1.getCh() || b.getB1(space) == p2.getCh()); //do until an acceptable space is input
			
			if (currentPlayer == 1) {
				b.updateBoard(space, p1.getCh()); //update both boards with player 1 symbol
			}
			else {
				b.updateBoard(space, p2.getCh()); //update both boards with player 2 symbol
			}
			currentPlayer = switchP(currentPlayer); //switch players
			turn++; //increase turn counter
		}
		//Game has finished. Update and display score
		b.showBoards(); //draw the boards
		if (b.Win() == false) { //if the board is filled, increase the draw counter
			draw++;
		}
		else {
			currentPlayer = switchP(currentPlayer); //switch back to the winning player
			if (currentPlayer == 1) {
				cout << "Player 1 wins" << endl;
				p1.winUp(); //increase p1 win count
			}
			else {
				cout << "Player 2 wins" << endl;
				p2.winUp(); //increase p2 win count
			}
		}
		cout << "The game count is:" << endl; //display scores
		cout << "Player 1: " << p1.getWins() << endl;
		cout << "Player 2: " << p2.getWins() << endl;
		cout << "Draws: " << draw << endl << endl;
		
		//Play again statment
		cout << "Do you want to play again? Y/N" << endl;
		cin >> playAgain;
		if (playAgain == 'n' || playAgain == 'N') {
			newGame = false;
		}
	}
}

int switchP(int p) //switch between p1 and p2
{
	if(p==1)
	{
		p = 2;
	}
	else
	{
		p = 1;
	}
	return p;
}
